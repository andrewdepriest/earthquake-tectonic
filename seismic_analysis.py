# -*- coding: utf-8 -*-
"""Seismic Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CuGcvD1qS6huPsKOCGQExfjPFdTYRz0Z
"""

#libraries
import numpy as np
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import seaborn as sns
import folium
from folium import Choropleth
from folium.plugins import HeatMap
import datetime

np.random.seed(0)

#loading first dataset
df = pd.read_csv('earthquakes.csv')
df.head()

#dropping columns with missing values
missing_val_columns = [col for col in df.columns
                     if df[col].isnull().any()]
df = df.drop(missing_val_columns, axis=1)
df.head()

#loading second dataset
tectonic_plates = pd.read_csv('tectonic_plates.csv')
tectonic_plates.head()

#data cleaning

#parsing datetime, finding lengths
lengths = df['Date'].str.len()
lengths.value_counts()

#looking at wrong date data points
false_dates = np.where([lengths==24])[1]
print(false_dates)
df.loc[false_dates]

#fixing the false datetimes
df.loc[3378, 'Date'] = '02/23/1975'
df.loc[7512, 'Date'] = '04/28/1985'
df.loc[20650, 'Date'] = '03/13/2011'

#changing to recognized datetime by python
df['Date']= pd.to_datetime(df['Date'])
df.info()

#same cleaning for 'Time'
lengths = df['Time'].str.len()
lengths.value_counts()

#looking at wrong time data points
false_times = np.where([lengths==24])[1]
print(false_times)
df.loc[false_times]

#fixing times and setting it to timedelta
df.loc[3378, 'Time'] = '02:58:41'
df.loc[7512, 'Time'] = '02:53:41'
df.loc[20650, 'Time'] = '02:23:34'

df['Time'] = df['Time'].str.replace('^-', '')
df['Time'] = pd.to_timedelta(df['Time'])
df.info()

#creating additional time data
df['Date_Time'] = df['Date'] + df['Time']
df['Days']= df.Date.dt.strftime('%A')
df.head()

#data analysis

#lineplot with magnitues over time
plt.figure(figsize=(12,8))
Time_series = sns.lineplot(x=df['Date'].dt.year, y='Magnitude', data=df, color='#964B00')
Time_series.set_title('Time Series of Earthquakes Over Time')
Time_series.set_ylabel("Magnitude")
Time_series.set_xlabel("Date")

plt.figure(figsize=(12,8))
Time_series_Type = sns.lineplot(x=df['Date'].dt.year, y='Magnitude', data=df,\
                                palette='deep', hue='Type')
Time_series_Type.set_title("Time Series Of Earthquakes Over Years (With Type)")
Time_series_Type.set_ylabel("Magnitude")
Time_series_Type.set_xlabel("Date")

#distribution of earthquakes across days of week
plt.figure(figsize=(12,8))
Days_of_week=sns.barplot(x=df['Days'], y='Magnitude', data=df\
                         , hue='Type', palette='viridis', ci=None)
Days_of_week.set_title('Earthquake Intensity Over Days of Week')
Days_of_week.set_ylabel('Magnitude')
Days_of_week.set_xlabel('Days of Week')

#geospatial mapping

#displaying the plates on a map
tectonic = folium.Map(tiles='cartodbpositron', zoom_start=5)
plates = list(tectonic_plates['plate'].unique())
for plate in plates:
  plate_vals = tectonic_plates[tectonic_plates['plate'] == plate]
  lats = plate_vals['lat'].values
  lons = plate_vals['lon'].values
  points = list(zip(lats,lons))
  indexes = [None] + [i + 1 for i, x in enumerate(points)\
                      if i < len(points) - 1 and abs(x[1]\
                      - points[i + 1][1]) > 300] + [None]
  for i in range(len(indexes) - 1):
    folium.vector_layers.PolyLine(points[indexes[i]:indexes[i+1]],\
                                  popup=plate, color='#58508d', \
                                  fill=False).add_to(tectonic)
tectonic

#displaying plates along with earthquakes
tectonic_quake = folium.Map(tiles="cartodbpositron", zoom_start=5)
gradient = {.33: '#7a5195', .66: '#ef5675', 1: '#ffa600'}
plates = list(tectonic_plates['plate'].unique())
for plate in plates:
    plate_vals = tectonic_plates[tectonic_plates['plate'] == plate]
    lats = plate_vals['lat'].values
    lons = plate_vals['lon'].values
    points = list(zip(lats, lons))
    indexes = [None] + [i + 1 for i, x in enumerate(points)\
                        if i < len(points) - 1 and abs(x[1] \
                        - points[i + 1][1]) > 300] + [None]
    for i in range(len(indexes) - 1):
        folium.vector_layers.PolyLine(points[indexes[i]:indexes[i+1]],\
        popup=plate, fill=False,  color="#58508d").add_to(tectonic_quake)
        HeatMap(data=df[['Latitude','Longitude']], hues='Magnitude', \
                min_opacity=0.5, radius=1, gradient=gradient).add_to(tectonic_quake)
tectonic_quake

#same as before but with only earthquakes and no other 'Type'
tectonic_quake = folium.Map(tiles="cartodbpositron", zoom_start=5)
plates = list(tectonic_plates['plate'].unique())
for plate in plates:
    plate_vals = tectonic_plates[tectonic_plates["plate"] == plate]
    lats = plate_vals["lat"].values
    lons = plate_vals["lon"].values
    points = list(zip(lats, lons))
    indexes = [None] + [i + 1 for i, x in enumerate(points) if i < len(points) - 1 and abs(x[1] - points[i + 1][1]) > 300] + [None]
    for i in range(len(indexes) - 1):
        df_onlyquakes = df[df['Type'] == 'Earthquake']
        folium.vector_layers.PolyLine(points[indexes[i]:indexes[i+1]], popup=plate, fill=False,  color="#58508d").add_to(tectonic_quake)
        HeatMap(data=df_onlyquakes[["Latitude", "Longitude"]], min_opacity=0.5,max_zoom=40,max_val=0.5,radius=1,gradient=gradient).add_to(tectonic_quake)

tectonic_quake

#map with boundaries and magnitude
magnitude_tectonics = folium.Map(tiles='cartodbpositron', zoom_start=5)
gradient = {.33: "#628d82", .66: "#a3c5bf", 1: "#eafffd"}
plates = list(tectonic_plates["plate"].unique())
for plate in plates:
    plate_vals = tectonic_plates[tectonic_plates["plate"] == plate]
    lats = plate_vals["lat"].values
    lons = plate_vals["lon"].values
    points = list(zip(lats, lons))
    indexes = [None] + [i + 1 for i, x in enumerate(points) if i < len(points)\
                        - 1 and abs(x[1] - points[i + 1][1]) > 300] + [None]
    for i in range(len(indexes) - 1):
        folium.vector_layers.PolyLine(points[indexes[i]:indexes[i+1]], fill=False,\
                                      color="#58508d").add_to(magnitude_tectonics)

def color_magnitude(val):
  if val < 5.9:
      return "#ffeda0"
  elif val < 6.5:
      return "#f46d43"
  else:
      return "#67001f"

for i in range(0, len(df)):
  folium.Circle(location=[df.iloc[i]["Latitude"], df.iloc[i]["Longitude"]],\
                radius=2000, color=color_magnitude(df.iloc[i]["Magnitude"])).add_to(magnitude_tectonics)

legend_html = '''
     <div style="position: fixed; bottom: 50px; left: 50px; z-index:9999; font-size: 14px;">
     <p>Magnitude Legend</p>
     <p><span style="color:#ffeda0">&#9679;</span> Magnitude &lt; 5.9</p>
     <p><span style="color:#f46d43">&#9679;</span> 5.9 &le; Magnitude &lt; 6.5</p>
     <p><span style="color:#67001f">&#9679;</span> Magnitude &ge; 6.5</p>
     </div>
     '''
magnitude_tectonics.get_root().html.add_child(folium.Element(legend_html))

folium.LayerControl().add_to(magnitude_tectonics)

magnitude_tectonics

#map with boundaries and depth
depth_tectonics  = folium.Map(tiles="cartodbpositron", zoom_start=5)
gradient = {.33: "#628d82", .66: "#a3c5bf", 1: "#eafffd"}
plates = list(tectonic_plates["plate"].unique())
for plate in plates:
    plate_vals = tectonic_plates[tectonic_plates["plate"] == plate]
    lats = plate_vals["lat"].values
    lons = plate_vals["lon"].values
    points = list(zip(lats, lons))
    indexes = [None] + [i + 1 for i, x in enumerate(points) if i < len(points) -\
                        1 and abs(x[1] - points[i + 1][1]) > 300] + [None]
    for i in range(len(indexes) - 1):
        folium.vector_layers.PolyLine(points[indexes[i]:indexes[i+1]],fill=False,\
                                      color="#58508d").add_to(depth_tectonics)

def color_depth(val):
            if val < 50.0:
                return "#ffeda0"
            elif val < 100.0:
                return "#f46d43"
            else:
                return "#67001f"

for i in range(0,len(df)):
    folium.Circle(location=[df.iloc[i]["Latitude"], df.iloc[i]["Longitude"]],radius=2000,\
                  color=color_depth(df.iloc[i]["Depth"])).add_to(depth_tectonics)

legend_html = '''
     <div style="position: fixed; bottom: 50px; left: 50px; z-index:9999; font-size: 14px;">
     <p>Depth Legend</p>
     <p><span style="color:#ffeda0">&#9679;</span> Depth &lt; 50.0</p>
     <p><span style="color:#f46d43">&#9679;</span> 50.0 &le; Depth &lt; 100.0</p>
     <p><span style="color:#67001f">&#9679;</span> Depth &ge; 100.0</p>
     </div>
     '''
depth_tectonics.get_root().html.add_child(folium.Element(legend_html))

folium.LayerControl().add_to(depth_tectonics)

depth_tectonics